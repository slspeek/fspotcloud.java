import org.apache.tools.ant.filters.ExpandProperties

description = 'Selenium testing for prod-j2ee-war'

apply plugin: 'tomcat'

findbugsTest.enabled = false;


dependencies {
    tomcat "org.apache.tomcat:catalina:${tomcatVersion}",
            "org.apache.tomcat:coyote:${tomcatVersion}",
            "org.apache.tomcat:juli:${tomcatVersion}",
            "org.apache.tomcat:jasper:${tomcatVersion}"

    testCompile project(path: ':e2e-test', configuration: 'testCompile')
    testCompile "org.seleniumhq.selenium:selenium:2.0b3"
    testCompile "org.seleniumhq.selenium.client-drivers:selenium-java-client-driver:1.0.2"
    testCompile libs.guiceberry
    testCompile libs.guava_testlib
    testCompile libs.junit
    testCompile libs.guice
}

task unpackWar(dependsOn: ':prod-j2ee-war:assemble') << {
    mkdir "$buildDir/exploded-war-raw"
    mkdir "$buildDir/exploded"
    myTests = file("../prod-j2ee-war/build/libs/prod-j2ee-war-${version}.war")
    ant.unjar(dest: "$buildDir/exploded-war-raw/", src: myTests)
}

task copyWar(dependsOn:  unpackWar, type: Copy) {
    ant.properties['bot.secret.userinput'] = "${bot_secret}".toString()
    from('build/exploded-war-raw') {
        include "**/properties.properties"
        filter(ExpandProperties, project: ant.project)
    }
    from('build/exploded-war-raw') {
        exclude "**/properties.properties"
    }
    into 'build/exploded'
}

task unpackTest(dependsOn: ':e2e-test:packageTests') << {
    myTests = file("../e2e-test/build/libs/e2e-test-${version}-tests.jar")
    ant.unjar(dest: "$buildDir/classes/test", src: myTests)
}

task peerStop(type: Exec) {
    commandLine "telnet", "localhost", "4444"
    ignoreExitValue = true
}

task removeSecurity(type: Exec, dependsOn: copyWar) {
    commandLine "sed", "-i", "-e", "s/com.googlecode.fspotcloud.server.inject.J2eeGuiceServletConfig/com.googlecode.fspotcloud.server.inject.J2eeNoAuthGuiceServletConfig/",
            "build/exploded/WEB-INF/web.xml"
}
task peerRun(type: Exec, dependsOn: ':peer:jar') {
    commandLine /*"screen", "-d", "-m", */ "../peer/peer_run.sh",
            "${version}", "${bot_secret}", "localhost:8080/j2ee-e2e",
            "../peer/src/test/resources/photos.db"
}

tomcatRun.dependsOn removeSecurity


[tomcatRun, tomcatStop]*.stopPort = 8090
[tomcatRun, tomcatStop]*.stopKey = 'STOP'
[tomcatRun, tomcatStop]*.daemon = true

tomcatRun {
    webAppSourceDirectory = file("build/exploded")
}

test {
    systemProperties['GuiceBerryEnvSelectorOverride_com.googlecode.fspotcloud.test.EmptyGuiceBerryEnv'] =
        'com.googlecode.fspotcloud.test.J2eeWarGuiceBerryEnv'
    systemProperties['bot.secret'] = bot_secret
    systemProperties['endpoint'] = "localhost:8080/j2ee-e2e"
    systemProperties['peer.jar'] = "../peer/build/libs/peer-${version}.jar"
    include "com/googlecode/fspotcloud/test/LocalSuite.class"
    testLogging.showStandardStreams = true
}

test.dependsOn tomcatRun, unpackTest, ":peer:assemble"

test << {
    println "Stopping server"
    tomcatStop.execute()
    println "Stopping peer"
    peerStop.execute()
}

task deleteDB(type: Delete) {
    delete '../MODELJPA', 'runtime', 'derby.log', "MODELJPA"
}
clean.dependsOn deleteDB, tomcatStop, peerStop
